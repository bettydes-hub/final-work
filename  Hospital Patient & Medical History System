//sosina
#include <iostream>
#include <string>
#include <queue>
#include <limits>  // For input validation

using namespace std;

// Structure to represent a medical history record
struct MedicalHistory {
    string visit;
    string diagnosis;
    string prescription;
    MedicalHistory* next; // Link to next medical record in the list
};

// Structure to represent a patient
struct Patient {
    string name;
    int age;
    string medicalID;
    MedicalHistory* historyHead; // Linked list head for past medical history
    Patient* next; // Link to next patient in the list
};

class HospitalSystem {
private:
    queue<Patient*> patientQueue; // Queue to manage patients
    Patient* patientListHead; // Linked list to store patients

public:
    HospitalSystem() {
        patientListHead = NULL;
    }

    // Helper function to safely get an integer input (age)
    int getValidIntegerInput(string prompt) {
        int value;
        while (true) {
            cout << prompt;
            cin >> value;
            if (cin.fail()) {
                cin.clear();  // clear the error flag
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // discard invalid input
                cout << "Invalid input! Please enter a valid number.\n";
            } else if (value <= 0) {
                cout << "Age must be greater than 0. Please enter a valid age.\n";
            } else {
                return value;
            }
        }
    }
//betelhem
    // Add a new patient
    void addPatient() {
        cout << "\nYou've chosen to add a new patient.\n";
        Patient* newPatient = new Patient;
        newPatient->historyHead = NULL;
        newPatient->next = NULL;

        cout << "Enter patient name: ";
        cin >> newPatient->name;

        // Handle invalid input for age
        newPatient->age = getValidIntegerInput("Enter patient age (must be greater than 0): ");

        // Handle invalid input for medical ID
        string medicalID;
        while (true) {
            cout << "Enter medical ID (alphanumeric): ";
            cin >> medicalID;
            if (medicalID.length() > 0) {
                newPatient->medicalID = medicalID;
                break;
            } else {
                cout << "Medical ID cannot be empty. Please enter a valid ID.\n";
            }
        }

        // Add the new patient to the list and queue
        if (patientListHead == NULL) {
            patientListHead = newPatient;
        } else {
            Patient* temp = patientListHead;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newPatient;
        }

        patientQueue.push(newPatient); // Add patient to the queue
        cout << "Patient added successfully!\n";
    }
//Anwar

// Record medical history for a patient
    void recordMedicalHistory(string medicalID) {
        cout << "\nYou've chosen to record medical history for a patient.\n";
        Patient* temp = patientListHead;
        bool found = false;

        while (temp != NULL) {
            if (temp->medicalID == medicalID) {
                found = true;
                // Record a new medical history entry for the patient
                MedicalHistory* newRecord = new MedicalHistory;
                cout << "Enter visit details: ";
                cin >> newRecord->visit;
                cout << "Enter diagnosis: ";
                cin >> newRecord->diagnosis;
                cout << "Enter prescription: ";
                cin >> newRecord->prescription;
                newRecord->next = temp->historyHead;
                temp->historyHead = newRecord; // Add to the patient's history
                cout << "Medical history recorded successfully!\n";
                break;
            }
            temp = temp->next;
        }

        if (!found) {
            cout << "Patient with medical ID " << medicalID << " not found!\n";
        }
    }
//bin 
void showPatientHistory(string medicalID) {
        cout << "\nYou've chosen to view a patient's medical history.\n";
        Patient* temp = patientListHead;
        bool found = false;

        while (temp != NULL) {
            if (temp->medicalID == medicalID) {
                found = true;
                cout << "Patient Name: " << temp->name << endl;
                cout << "Age: " << temp->age << endl;
                cout << "Medical ID: " << temp->medicalID << endl;
                cout << "\nMedical History: \n";

                MedicalHistory* record = temp->historyHead;
                if (record == NULL) {
                    cout << "No medical history available.\n";
                } else {
                    while (record != NULL) {
                        cout << "Visit: " << record->visit << endl;
                        cout << "Diagnosis: " << record->diagnosis << endl;
                        cout << "Prescription: " << record->prescription << endl;
                        cout << "-----------------------------" << endl;
                        record = record->next;
                    }
                }
                break;
            }
            temp = temp->next;
        }

        if (!found) {
            cout << "Patient with medical ID " << medicalID << " not found!\n";
        }
    }
//aman
// Schedule an appointment (add patient to the queue)
    void scheduleAppointment(string medicalID) {
        cout << "\nYou've chosen to schedule an appointment for a patient.\n";
        Patient* temp = patientListHead;
        bool found = false;

        while (temp != NULL) {
            if (temp->medicalID == medicalID) {
                found = true;
                patientQueue.push(temp); // Re-add patient to the queue for processing
                cout << "Appointment scheduled for " << temp->name << endl;
                break;
            }
            temp = temp->next;
        }

        if (!found) {
            cout << "Patient with medical ID " << medicalID << " not found!\n";
        }
    }
//eyuel
// Display all patients' information (name, diagnosis, medical ID)
    void displayAllPatients() {
        cout << "\nYou've chosen to display all patients and their medical information.\n";
        Patient* temp = patientListHead;
        if (temp == NULL) {
            cout << "No patients available in the system.\n";
        } else {
            while (temp != NULL) {
                cout << "Name: " << temp->name << endl;
                cout << "Medical ID: " << temp->medicalID << endl;

                MedicalHistory* record = temp->historyHead;
                if (record == NULL) {
                    cout << "No medical history available.\n";
                } else {
                    while (record != NULL) {
                        cout << "Diagnosis: " << record->diagnosis << endl;
                        record = record->next;
                    }
                }
                cout << "-----------------------------" << endl;
                temp = temp->next;
            }
        }
    }
//yord
// Search for a patient by name
    void searchPatientByName() {
        cout << "\nYou've chosen to search for a patient by name.\n";
        string name;
        cout << "Enter the patient's name: ";
        cin >> name;

        Patient* temp = patientListHead;
        bool found = false;

        while (temp != NULL) {
            if (temp->name == name) {
                found = true;
                cout << "Patient found!\n";
                cout << "Name: " << temp->name << endl;
                cout << "Age: " << temp->age << endl;
                cout << "Medical ID: " << temp->medicalID << endl;
                break;
            }
            temp = temp->next;
        }

        if (!found) {
            cout << "Patient with name " << name << " not found!\n";
        }
    }
//Abiyot 
//samrawit

int main() {
    HospitalSystem system;
    int choice;

    do {
        // Main menu for the system
        cout << "\nHospital Patient & Medical History System\n";
        cout << "Choose an option by entering the corresponding number:\n";
        cout << "1. Add a new patient\n";
        cout << "2. Record medical history for a patient\n";
        cout << "3. View a patient's medical history\n";
        cout << "4. Schedule an appointment\n";
        cout << "5. Display all patients and their medical information\n";
        cout << "6. Search for a patient by name\n";
        cout << "7. Update a patient's medical history\n";
        cout << "0. Exit the system\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "\nYou have selected: Add a new patient.\n";
                system.addPatient();
                break;
            case 2:
                {
                    string medicalID;
                    cout << "\nYou have selected: Record medical history for a patient.\n";
                    cout << "Enter the patient's medical ID: ";
                    cin >> medicalID;
                    system.recordMedicalHistory(medicalID);
                    break;
                }
            case 3:
                {
                    string medicalID;
                    cout << "\nYou have selected: View a patient's medical history.\n";
                    cout << "Enter the patient's medical ID: ";
                    cin >> medicalID;
                    system.showPatientHistory(medicalID);
                    break;
                }
            case 4:
                {
                    string medicalID;
                    cout << "\nYou have selected: Schedule an appointment for a patient.\n";
                    cout << "Enter the patient's medical ID: ";
                    cin >> medicalID;
                    system.scheduleAppointment(medicalID);
                    break;
                }
            case 5:
                cout << "\nYou have selected: Display all patients and their medical information.\n";
                system.displayAllPatients();
                break;
            case 6:
                cout << "\nYou have selected: Search for a patient by name.\n";
                system.searchPatientByName();
                break;
            case 7:
                {
                    string medicalID;
                    cout << "\nYou have selected: Update a patient's medical history.\n";
                    cout << "Enter the patient's medical ID: ";
                    cin >> medicalID;
                    system.updateMedicalHistory(medicalID);
                    break;
                }
            case 0:
                cout << "Exiting the system...\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 0);

    return 0;
}
//samrawit
